---
LangMarker: Eng
#Does this language use non-whitespace-separated numbers?
CompoundNumberLanguage: !bool false
#Does this culture uses period and comma intercheangeably as decimal separator?
MultiDecimalSeparatorCulture: !bool true
#Integer Regex
RoundNumberIntegerRegex: !simpleRegex
  def: (?:صد|هزار|میلیون|میلیارد|تریلیارد)
ZeroToNineIntegerRegex: !simpleRegex
  def: (?:سه|هفت|هشت|چهار|پنج|صفر|نه|یک|دو|six)
TwoToNineIntegerRegex: !simpleRegex
  def: (?:سه|هفت|هشت|چهار|پنج|نه|دو|شش)
NegativeNumberTermsRegex: !simpleRegex
  def: (?<negTerm>(منفی)\s+)
NegativeNumberSignRegex: !nestedRegex
  def: ^{NegativeNumberTermsRegex}.*
  references: [ NegativeNumberTermsRegex ]
AnIntRegex: !simpleRegex
  def: (an?)(?=\s)
TenToNineteenIntegerRegex: !simpleRegex
  def: (?:هفده|سیزده|چهارده|هجده|نوزده|پانزده|شانزده|یازده|دوازده|ده)
TensNumberIntegerRegex: !simpleRegex
  def: (?:هفتاد|بیست|سی|هشتاد|نود|چهل|پنجاه|شصت)
SeparaIntRegex: !nestedRegex
  def: (?:(({TenToNineteenIntegerRegex}|({TensNumberIntegerRegex}(\s+(and\s+)?|\s*-\s*){ZeroToNineIntegerRegex})|{TensNumberIntegerRegex}|{ZeroToNineIntegerRegex})(\s+{RoundNumberIntegerRegex})*))|(({AnIntRegex}(\s+{RoundNumberIntegerRegex})+))
  references: [ TenToNineteenIntegerRegex, TensNumberIntegerRegex, ZeroToNineIntegerRegex, RoundNumberIntegerRegex, AnIntRegex ]
AllIntRegex: !nestedRegex
  def: (?:((({TenToNineteenIntegerRegex}|({TensNumberIntegerRegex}(\s+(and\s+)?|\s*-\s*){ZeroToNineIntegerRegex})|{TensNumberIntegerRegex}|{ZeroToNineIntegerRegex}|{AnIntRegex})(\s+{RoundNumberIntegerRegex})+)\s+(and\s+)?)*{SeparaIntRegex})
  references: [ TenToNineteenIntegerRegex, TensNumberIntegerRegex, ZeroToNineIntegerRegex, AnIntRegex, RoundNumberIntegerRegex, SeparaIntRegex ]
PlaceHolderPureNumber: !simpleRegex
  def: \b
PlaceHolderDefault: !simpleRegex
  def: \D|\b
NumbersWithPlaceHolder: !paramsRegex
  def: (((?<!\d+\s*)-\s*)|(?<=\b))\d+(?!([\.,]\d+[a-zA-Z]))(?={placeholder})
  params: [ placeholder ]
NumbersWithSuffix: !nestedRegex
  def: (((?<!\d+\s*)-\s*)|(?<=\b))\d+\s*{BaseNumbers.NumberMultiplierRegex}(?=\b)
  references: [ BaseNumbers.NumberMultiplierRegex ]
RoundNumberIntegerRegexWithLocks: !nestedRegex
  def: (?<=\b)\d+\s+{RoundNumberIntegerRegex}(?=\b)
  references: [ RoundNumberIntegerRegex ]
NumbersWithDozenSuffix: !simpleRegex
  def: (((?<!\d+\s*)-\s*)|(?<=\b))\d+\s+dozen(s)?(?=\b)
AllIntRegexWithLocks: !nestedRegex
  def: ((?<=\b){AllIntRegex}(?=\b))
  references: [ AllIntRegex ]
AllIntRegexWithDozenSuffixLocks: !nestedRegex
  def: (?<=\b)(((half\s+)?a\s+dozen)|({AllIntRegex}\s+dozen(s)?))(?=\b)
  references: [ AllIntRegex ]
#Ordinal Regex
RoundNumberOrdinalRegex: !simpleRegex
  def: (?:صدمین|هزارمین|میلیونیم|میلیاردم|تریلیاردم)
NumberOrdinalRegex: !simpleRegex
  def: (?:اول|دوم|سوم|چهارم|پنجم|ششم|هفتم|هشتم|نهم|دهم|یازدهم|دوازدهم|سیزدهم|چهاردهم|پانزدهم|شانزدهم|هفدهم|هجدهم|نوزدهم|بیستم|سیزهم|چهلم|پنجاهم|شصیتم|هفتادم|هشتادم|نودم)
RelativeOrdinalRegex: !simpleRegex
  def: (?<relativeOrdinal>(بعدی|قبلی|الانم)\s+one|(the\s+دوم|بعدی)\s+to\s+آخری)
BasicOrdinalRegex: !nestedRegex
  def: ({NumberOrdinalRegex}|{RelativeOrdinalRegex})
  references: [ NumberOrdinalRegex, RelativeOrdinalRegex ]
SuffixBasicOrdinalRegex: !nestedRegex
  def: (?:(((({TensNumberIntegerRegex}(\s+(and\s+)?|\s*-\s*){ZeroToNineIntegerRegex})|{TensNumberIntegerRegex}|{ZeroToNineIntegerRegex}|{AnIntRegex})(\s+{RoundNumberIntegerRegex})+)\s+(and\s+)?)*({TensNumberIntegerRegex}(\s+|\s*-\s*))?{BasicOrdinalRegex})
  references: [ TensNumberIntegerRegex, ZeroToNineIntegerRegex, AnIntRegex, RoundNumberIntegerRegex, BasicOrdinalRegex ]
SuffixRoundNumberOrdinalRegex: !nestedRegex
  def: (?:({AllIntRegex}\s+){RoundNumberOrdinalRegex})
  references: [ AllIntRegex, RoundNumberOrdinalRegex ]
AllOrdinalRegex: !nestedRegex
  def: (?:{SuffixBasicOrdinalRegex}|{SuffixRoundNumberOrdinalRegex})
  references: [ SuffixBasicOrdinalRegex, SuffixRoundNumberOrdinalRegex ]
OrdinalSuffixRegex: !simpleRegex
  def: (?<=\b)(?:(\d*(1st|2nd|3rd|[4-90]th))|(1[1-2]th))(?=\b)
OrdinalNumericRegex: !simpleRegex
  def: (?<=\b)(?:\d{1,3}(\s*,\s*\d{3})*\s*th)(?=\b)
OrdinalRoundNumberRegex: !nestedRegex
  def: (?<!an?\s+){RoundNumberOrdinalRegex}
  references: [ RoundNumberOrdinalRegex ]
OrdinalEnglishRegex: !nestedRegex
  def: (?<=\b){AllOrdinalRegex}(?=\b)
  references: [ AllOrdinalRegex ]
#Fraction Regex
#Double Regex
AllPointRegex: !nestedRegex
  def: ((\s+{ZeroToNineIntegerRegex})+|(\s+{SeparaIntRegex}))
  references: [ ZeroToNineIntegerRegex, SeparaIntRegex ]
AllFloatRegex: !nestedRegex
  def: '{AllIntRegex}(\s+point){AllPointRegex}'
  references: [ AllIntRegex, AllPointRegex ]
DoubleWithMultiplierRegex: !nestedRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+[\.,])))\d+[\.,]\d+\s*{BaseNumbers.NumberMultiplierRegex}(?=\b)
  references: [ BaseNumbers.NumberMultiplierRegex ]
DoubleExponentialNotationRegex: !simpleRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+[\.,])))(\d+([\.,]\d+)?)e([+-]*[1-9]\d*)(?=\b)
DoubleCaretExponentialNotationRegex: !simpleRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+[\.,])))(\d+([\.,]\d+)?)\^([+-]*[1-9]\d*)(?=\b)
DoubleDecimalPointRegex: !paramsRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+[\.,])))\d+[\.,]\d+(?!([\.,]\d+))(?={placeholder})
  params: [ placeholder ]
DoubleWithoutIntegralRegex: !paramsRegex
  def: (?<=\s|^)(?<!(\d+))[\.,]\d+(?!([\.,]\d+))(?={placeholder})
  params: [ placeholder ]
DoubleWithRoundNumber: !nestedRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+[\.,])))\d+[\.,]\d+\s+{RoundNumberIntegerRegex}(?=\b)
  references: [ RoundNumberIntegerRegex ]
DoubleAllFloatRegex: !nestedRegex
  def: ((?<=\b){AllFloatRegex}(?=\b))
  references: [ AllFloatRegex ]
ConnectorRegex: !simpleRegex
    def: (?<spacer>and)
#Percentage Regex
# "in" is ambiguous for cases like "more than 30000 in 2009", other connector "out of", "over" is not ambiguous in English
#Parser
DecimalSeparatorChar: !char '.'
FractionMarkerToken: over
NonDecimalSeparatorChar: !char ','
HalfADozenText: six
WordSeparatorToken: و
WrittenDecimalSeparatorTexts: [point]
WrittenGroupSeparatorTexts: [punto]
WrittenIntegerSeparatorTexts: [و]
WrittenFractionSeparatorTexts: [و]
HalfADozenRegex: !simpleRegex
  def: half\s+a\s+dozen
DigitalNumberRegex: !nestedRegex
  def: ((?<=\b)(hundred|thousand|[mb]illion|trillion|dozen(s)?)(?=\b))|((?<=(\d|\b)){BaseNumbers.MultiplierLookupRegex}(?=\b))
  references: [ BaseNumbers.MultiplierLookupRegex ]
CardinalNumberMap: !dictionary
  types: [ string, long ]
  entries:
    a: 1
    zero: 0
    an: 1
    one: 1
    two: 2
    three: 3
    four: 4
    five: 5
    six: 6
    seven: 7
    eight: 8
    nine: 9
    ten: 10
    eleven: 11
    twelve: 12
    dozen: 12
    dozens: 12
    thirteen: 13
    fourteen: 14
    fifteen: 15
    sixteen: 16
    seventeen: 17
    eighteen: 18
    nineteen: 19
    twenty: 20
    thirty: 30
    forty: 40
    fifty: 50
    sixty: 60
    seventy: 70
    eighty: 80
    ninety: 90
    hundred: 100
    thousand: 1000
    million: 1000000
    billion: 1000000000
    trillion: 1000000000000
OrdinalNumberMap: !dictionary
  types: [ string, long ]
  entries:
    first: 1
    second: 2
    secondary: 2
    half: 2
    third: 3
    fourth: 4
    quarter: 4
    fifth: 5
    sixth: 6
    seventh: 7
    eighth: 8
    ninth: 9
    tenth: 10
    eleventh: 11
    twelfth: 12
    thirteenth: 13
    fourteenth: 14
    fifteenth: 15
    sixteenth: 16
    seventeenth: 17
    eighteenth: 18
    nineteenth: 19
    twentieth: 20
    thirtieth: 30
    fortieth: 40
    fiftieth: 50
    sixtieth: 60
    seventieth: 70
    eightieth: 80
    ninetieth: 90
    hundredth: 100
    thousandth: 1000
    millionth: 1000000
    billionth: 1000000000
    trillionth: 1000000000000
    firsts: 1
    halves: 2
    thirds: 3
    fourths: 4
    quarters: 4
    fifths: 5
    sixths: 6
    sevenths: 7
    eighths: 8
    ninths: 9
    tenths: 10
    elevenths: 11
    twelfths: 12
    thirteenths: 13
    fourteenths: 14
    fifteenths: 15
    sixteenths: 16
    seventeenths: 17
    eighteenths: 18
    nineteenths: 19
    twentieths: 20
    thirtieths: 30
    fortieths: 40
    fiftieths: 50
    sixtieths: 60
    seventieths: 70
    eightieths: 80
    ninetieths: 90
    hundredths: 100
    thousandths: 1000
    millionths: 1000000
    billionths: 1000000000
    trillionths: 1000000000000
RoundNumberMap: !dictionary
  types: [ string, long ]
  entries:
    hundred: 100
    thousand: 1000
    million: 1000000
    billion: 1000000000
    trillion: 1000000000000
    hundredth: 100
    thousandth: 1000
    millionth: 1000000
    billionth: 1000000000
    trillionth: 1000000000000
    hundredths: 100
    thousandths: 1000
    millionths: 1000000
    billionths: 1000000000
    trillionths: 1000000000000
    dozen: 12
    dozens: 12
    k: 1000
    m: 1000000
    g: 1000000000
    b: 1000000000
    t: 1000000000000
AmbiguityFiltersDict: !dictionary
  types: [ string, string ]
  entries:
    '\bone\b': '\b(the|this|that|which)\s+(one)\b'
RelativeReferenceOffsetMap: !dictionary
  types: [ string, string ]
  entries:
    last: 0
    next one: 1
    current: 0
    current one: 0
    previous one: -1
    the second to last: -1
    the one before the last one: -1
    the one before the last: -1
    next to last: -1
    penultimate: -1
    the last but one: -1
    antepenultimate: -2
    next: 1
    previous: -1
RelativeReferenceRelativeToMap: !dictionary
  types: [ string, string ]
  entries:
    last: end
    next one: current
    previous one: current
    current: current
    current one: current
    the second to last: end
    the one before the last one: end
    the one before the last: end
    next to last: end
    penultimate: end
    the last but one: end
    antepenultimate: end
    next: current
    previous: current
...
